{
  "contract_name": "coin-flip",
  "contract_version": "0.8.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "allowed_to_send_nft",
      "denoms",
      "fees",
      "nft_pool_max",
      "streak_nft_winning_amount",
      "streak_rewards",
      "wallets"
    ],
    "properties": {
      "allowed_to_send_nft": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "bank_limit": {
        "anyOf": [
          {
            "$ref": "#/definitions/Uint128"
          },
          {
            "type": "null"
          }
        ]
      },
      "denoms": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "fees": {
        "$ref": "#/definitions/Fees"
      },
      "flips_per_block_limit": {
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "max_bet_limit": {
        "anyOf": [
          {
            "$ref": "#/definitions/Uint128"
          },
          {
            "type": "null"
          }
        ]
      },
      "min_bet_limit": {
        "anyOf": [
          {
            "$ref": "#/definitions/Uint128"
          },
          {
            "type": "null"
          }
        ]
      },
      "nft_pool_max": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "sg721_addr": {
        "type": [
          "string",
          "null"
        ]
      },
      "streak_nft_winning_amount": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "streak_rewards": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/StreakReward"
        }
      },
      "wallets": {
        "$ref": "#/definitions/Wallets"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Fees": {
        "type": "object",
        "required": [
          "flip_bps",
          "holders_bps",
          "reserve_bps",
          "team_bps"
        ],
        "properties": {
          "flip_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "holders_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "reserve_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "team_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "StreakReward": {
        "type": "object",
        "required": [
          "reward",
          "streak"
        ],
        "properties": {
          "reward": {
            "$ref": "#/definitions/Uint128"
          },
          "streak": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Wallets": {
        "type": "object",
        "required": [
          "reserve",
          "team"
        ],
        "properties": {
          "reserve": {
            "type": "string"
          },
          "team": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Receive NFTs to add to our NFTs pool of streak mini game",
        "type": "object",
        "required": [
          "receive_nft"
        ],
        "properties": {
          "receive_nft": {
            "$ref": "#/definitions/Cw721ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Streak mini game msgs",
        "type": "object",
        "required": [
          "streak"
        ],
        "properties": {
          "streak": {
            "$ref": "#/definitions/StreakExecuteMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Flip msgs",
        "type": "object",
        "required": [
          "flip"
        ],
        "properties": {
          "flip": {
            "$ref": "#/definitions/FlipExecuteMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Only call-able by admin (mutlisig)",
        "type": "object",
        "required": [
          "sudo"
        ],
        "properties": {
          "sudo": {
            "$ref": "#/definitions/SudoMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw721ReceiveMsg": {
        "description": "Cw721ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "msg",
          "sender",
          "token_id"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Fees": {
        "type": "object",
        "required": [
          "flip_bps",
          "holders_bps",
          "reserve_bps",
          "team_bps"
        ],
        "properties": {
          "flip_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "holders_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "reserve_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "team_bps": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "FlipExecuteMsg": {
        "oneOf": [
          {
            "description": "Register the flip",
            "type": "object",
            "required": [
              "start_flip"
            ],
            "properties": {
              "start_flip": {
                "type": "object",
                "required": [
                  "amount",
                  "pick"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "pick": {
                    "$ref": "#/definitions/PickTypes"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Does the actual flip",
            "type": "object",
            "required": [
              "do_flips"
            ],
            "properties": {
              "do_flips": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PickTypes": {
        "type": "string",
        "enum": [
          "heads",
          "tails"
        ]
      },
      "StreakExecuteMsg": {
        "oneOf": [
          {
            "description": "Claim streak reward if the sender streak matches one of the rewards e.g - streak reward is at 8 streaks, if sender have 8 streaks, he can claim the reward if sender have 9 streaks, he can't claim rewards for 8 streak,\n\nClaim only highest reward, so if sender have 10 streak, and streak rewards are at 8 and 10, only 10th will be claimed, and streak will be reset.\n\nNFT claims will be automatically claimed on 12th streak (highest reward) but if NFT pool is empty, last reward will be automatically sent",
            "type": "object",
            "required": [
              "claim"
            ],
            "properties": {
              "claim": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "StreakReward": {
        "type": "object",
        "required": [
          "reward",
          "streak"
        ],
        "properties": {
          "reward": {
            "$ref": "#/definitions/Uint128"
          },
          "streak": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "SudoMsg": {
        "oneOf": [
          {
            "description": "Distribute the collected fees so far",
            "type": "object",
            "required": [
              "distribute"
            ],
            "properties": {
              "distribute": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update fees",
            "type": "object",
            "required": [
              "update_fees"
            ],
            "properties": {
              "update_fees": {
                "type": "object",
                "required": [
                  "fees"
                ],
                "properties": {
                  "fees": {
                    "$ref": "#/definitions/Fees"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_sg721"
            ],
            "properties": {
              "update_sg721": {
                "type": "object",
                "required": [
                  "addr"
                ],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update the bank limit",
            "type": "object",
            "required": [
              "update_bank_limit"
            ],
            "properties": {
              "update_bank_limit": {
                "type": "object",
                "required": [
                  "limit"
                ],
                "properties": {
                  "limit": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update the bet limit (min and max)",
            "type": "object",
            "required": [
              "update_bet_limit"
            ],
            "properties": {
              "update_bet_limit": {
                "type": "object",
                "required": [
                  "max_bet",
                  "min_bet"
                ],
                "properties": {
                  "max_bet": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "min_bet": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Pause the contract in case of emergency",
            "type": "object",
            "required": [
              "update_pause"
            ],
            "properties": {
              "update_pause": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update streak related config stuff",
            "type": "object",
            "required": [
              "update_streak"
            ],
            "properties": {
              "update_streak": {
                "type": "object",
                "properties": {
                  "allowed_to_send_nft": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "nft_pool_max": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "streak_nft_winning_amount": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "streak_rewards": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "$ref": "#/definitions/StreakReward"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw all or a single NFT from the pool only to the team wallet",
            "type": "object",
            "required": [
              "withdraw_nft_from_pool"
            ],
            "properties": {
              "withdraw_nft_from_pool": {
                "type": "object",
                "properties": {
                  "all": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "index": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Send excess funds to the reserve wallet This function checks the bank limit - fees and send the excess to the reserve wallet",
            "type": "object",
            "required": [
              "send_excess_funds"
            ],
            "properties": {
              "send_excess_funds": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This transfer the NFT to the team wallet This function will check that the NFT is not in the pool In case NFT will be transfered by mistake we will be able to handle it",
            "type": "object",
            "required": [
              "transfer_nft"
            ],
            "properties": {
              "transfer_nft": {
                "type": "object",
                "required": [
                  "contract",
                  "token_id"
                ],
                "properties": {
                  "contract": {
                    "type": "string"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Get config",
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get fees total",
        "type": "object",
        "required": [
          "get_fees_amount"
        ],
        "properties": {
          "get_fees_amount": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get last 10 flips",
        "type": "object",
        "required": [
          "get_last5"
        ],
        "properties": {
          "get_last5": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get score of wallet",
        "type": "object",
        "required": [
          "get_score"
        ],
        "properties": {
          "get_score": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "let us know if we should execute the do flips msg or not this is to prevent sending unnecessary txs",
        "type": "object",
        "required": [
          "should_do_flips"
        ],
        "properties": {
          "should_do_flips": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Do dry ditribution to see results",
        "type": "object",
        "required": [
          "dry_distribution"
        ],
        "properties": {
          "dry_distribution": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the NFT pool",
        "type": "object",
        "required": [
          "get_nft_pool"
        ],
        "properties": {
          "get_nft_pool": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "dry_distribution": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DryDistributionResponse",
      "type": "object",
      "required": [
        "fees_per_token",
        "holders_total_fee",
        "holders_total_shares",
        "number_of_holders",
        "pay_to_holders",
        "reserve_total_fee",
        "team_total_fee",
        "total_fees"
      ],
      "properties": {
        "fees_per_token": {
          "$ref": "#/definitions/Decimal"
        },
        "holders_total_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "holders_total_shares": {
          "$ref": "#/definitions/Decimal"
        },
        "number_of_holders": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pay_to_holders": {
          "$ref": "#/definitions/Uint128"
        },
        "reserve_total_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "team_total_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "total_fees": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "admin",
        "bank_limit",
        "denoms",
        "fees",
        "flips_per_block_limit",
        "is_paused",
        "max_bet_limit",
        "min_bet_limit",
        "nft_pool_max",
        "streak_nft_winning_amount",
        "wallets"
      ],
      "properties": {
        "admin": {
          "type": "string"
        },
        "bank_limit": {
          "$ref": "#/definitions/Uint128"
        },
        "denoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fees": {
          "$ref": "#/definitions/Fees"
        },
        "flips_per_block_limit": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "is_paused": {
          "type": "boolean"
        },
        "max_bet_limit": {
          "$ref": "#/definitions/Uint128"
        },
        "min_bet_limit": {
          "$ref": "#/definitions/Uint128"
        },
        "nft_pool_max": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "sg721_addr": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "streak_nft_winning_amount": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "wallets": {
          "$ref": "#/definitions/Wallets"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Fees": {
          "type": "object",
          "required": [
            "flip_bps",
            "holders_bps",
            "reserve_bps",
            "team_bps"
          ],
          "properties": {
            "flip_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "holders_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "reserve_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "team_bps": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Wallets": {
          "type": "object",
          "required": [
            "reserve",
            "team"
          ],
          "properties": {
            "reserve": {
              "type": "string"
            },
            "team": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_fees_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "get_last5": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Flip",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Flip"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Flip": {
          "type": "object",
          "required": [
            "amount",
            "result",
            "streak",
            "timestamp",
            "wallet"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Coin"
            },
            "result": {
              "type": "boolean"
            },
            "streak": {
              "$ref": "#/definitions/Streak"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            },
            "wallet": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Streak": {
          "type": "object",
          "required": [
            "amount",
            "result"
          ],
          "properties": {
            "amount": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "result": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_nft_pool": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_NftReward",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NftReward"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "NftReward": {
          "type": "object",
          "required": [
            "contract_addr",
            "token_id"
          ],
          "properties": {
            "contract_addr": {
              "$ref": "#/definitions/Addr"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_score": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FlipScore",
      "type": "object",
      "required": [
        "last_flip",
        "streak"
      ],
      "properties": {
        "last_flip": {
          "$ref": "#/definitions/Timestamp"
        },
        "streak": {
          "$ref": "#/definitions/Streak"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Streak": {
          "type": "object",
          "required": [
            "amount",
            "result"
          ],
          "properties": {
            "amount": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "result": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "should_do_flips": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    }
  }
}
